from aiogram import Bot, Dispatcher
from aiogram.types import Message, Update
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timezone
from typing import Tuple, Dict, Any
import json

from app.config import settings
from app.db.mongo import users, conversations  # <‚Äî —Ç–≤–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ mongo.py

bot = Bot(
    token=settings.TG_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()


def _extract_text(message: Message) -> str:
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —Ç—è–Ω–µ–º —Ç–µ–∫—Å—Ç –∏–∑ text/caption, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ
    return message.text or message.caption or ""

async def _upsert_user_and_conversation(message: Message) -> Tuple[Dict[str, Any], Dict[str, Any]]:
    now = datetime.now(timezone.utc)
    u = message.from_user
    if u is None:
        return {}, {}

    telegram_id = u.id
    first_name = u.first_name or ""
    last_name = u.last_name or ""
    username = u.username or ""
    language_code = getattr(u, "language_code", None)
    text = _extract_text(message)

    # ‚úÖ FIX: –ù–∏–∫–∞–∫–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π –º–µ–∂–¥—É $setOnInsert –∏ $set
    users.update_one(
        {"telegram_id": telegram_id},
        {
            "$setOnInsert": {
                "telegram_id": telegram_id,
                "created_at": now,
            },
            "$set": {
                "first_name": first_name,
                "last_name": last_name,
                "username": username,
                "language_code": language_code,
                "last_message_at": now,
                "last_message_text": text,
                "last_seen_at": now,
            },
        },
        upsert=True,
    )

    user_doc = users.find_one({"telegram_id": telegram_id}, {"_id": 0})

    # –î–ª—è conversations –ø–æ–ª—è —Ç–æ–∂–µ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ–º
    conversations.update_one(
        {"user_id": telegram_id},
        {
            "$setOnInsert": {
                "user_id": telegram_id,
                "created_at": now,
                "title": f"Dialog with {username or first_name or telegram_id}",
                # ‚ö†Ô∏è –ë–´–õ–û: "messages": [] ‚Äî –£–ë–†–ê–õ–ò, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å $push
            },
            "$push": {
                "messages": {
                    "role": "user",
                    "text": text,
                    "ts": now,
                    "message_id": message.message_id,
                    "chat_id": message.chat.id if message.chat else None,
                }
            },
            "$set": {
                "updated_at": now
            },
        },
        upsert=True,
    )

    conversation_doc = conversations.find_one({"user_id": telegram_id}, {"_id": 0})
    return user_doc or {}, conversation_doc or {}


@dp.message()
async def on_any_message(message: Message):
    try:
        user_doc, conversation_doc = await _upsert_user_and_conversation(message)
        payload = {"user": user_doc, "conversation": conversation_doc}
        text = (
            "üìÑ <b>DB snapshot</b>\n"
            "–ù–∏–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Mongo:\n\n"
            f"<pre><code class=\"language-json\">{json.dumps(payload, ensure_ascii=False, indent=2, default=str)}</code></pre>"
        )
        await message.answer(text)
    except Exception as e:
        # –ß—Ç–æ–±—ã webhook –Ω–µ –ø–∞–¥–∞–ª 500-–∫–æ–π –∏ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å
        await message.answer(f"‚ö†Ô∏è DB error: <code>{type(e).__name__}: {str(e)}</code>")
        raise
